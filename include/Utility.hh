//------------------------------------------------------------------------------
//! @file Utility.hh
//! @author Paul Hermann Lensing
//! @brief Utility functions for kineticio library.
//------------------------------------------------------------------------------
#ifndef __KINETICIO_UTILITY_HH__
#define	__KINETICIO_UTILITY_HH__

/*----------------------------------------------------------------------------*/
#include <string>
#include <sstream>
#include <iomanip>
#include <uuid/uuid.h>
#include <kinetic/kinetic.h>

namespace kio {


static std::string toString(kinetic::StatusCode c)
{
  using kinetic::StatusCode;
  switch(c){
    case StatusCode::OK:
      return "OK";
    case StatusCode::CLIENT_IO_ERROR:
      return "CLIENT_IO_ERROR";
    case StatusCode::CLIENT_SHUTDOWN:
      return "CLIENT_SHUTDOWN";
    case StatusCode::CLIENT_INTERNAL_ERROR:
      return "CLIENT_INTERNAL_ERROR";
    case StatusCode::CLIENT_RESPONSE_HMAC_VERIFICATION_ERROR:
      return "CLIENT_RESPONSE_HMAC_VERIFICATION_ERROR";
    case StatusCode::REMOTE_HMAC_ERROR:
      return "REMOTE_HMAC_ERROR";
    case StatusCode::REMOTE_NOT_AUTHORIZED:
      return "REMOTE_NOT_AUTHORIZED";
    case StatusCode::REMOTE_CLUSTER_VERSION_MISMATCH:
      return "REMOTE_CLUSTER_VERSION_MISMATCH";
    case StatusCode::REMOTE_NOT_FOUND:
      return "REMOTE_NOT_FOUND";
    case StatusCode::REMOTE_VERSION_MISMATCH:
      return "REMOTE_VERSION_MISMATCH";
    default:
      return "OTHER_ERROR (code == " + std::to_string((long long int) static_cast<int>(c)) + ")";
  }
}

namespace utility {

  //--------------------------------------------------------------------------
  //! Create the kinetic key from the supplied path and chunk number.
  //!
  //! @param path base path
  //! @param chunk_number the chunk number
  //! @return the cluster key for the requested chunk
  //--------------------------------------------------------------------------
  static std::shared_ptr<const std::string> constructChunkKey(
      const std::string& base,
      int chunk_number
  )
  {
    std::ostringstream ss;
    ss << base << "_" << std::setw(10) << std::setfill('0') << chunk_number;
    return std::make_shared<const std::string>(ss.str());
  }

  //--------------------------------------------------------------------------
  //! Extract the cluster id from the supplied eos path.
  //!
  //! @param path eos kinetic path of the form kinetic:ID:path
  //! @return the extracted cluster id
  //--------------------------------------------------------------------------
  static std::string extractClusterID(
      const std::string& path
  )
  {
    size_t id_start = path.find_first_of(':') + 1;
    size_t id_end   = path.find_first_of(':', id_start);
    return path.substr(id_start, id_end-id_start);
  }

  //--------------------------------------------------------------------------
  //! Constructs a uuid string containing the supplied size attribute.
  //!
  //! @param size size attribute to encode in the returned uuid
  //! @return a uuid string
  //--------------------------------------------------------------------------
  static std::shared_ptr<const std::string> uuidGenerateEncodeSize(
      std::size_t size
  )
  {
    uuid_t uuid;
    uuid_generate(uuid);

    std::ostringstream ss;
    ss << std::setw(10) << std::setfill('0') << size;

    return std::make_shared<std::string>(
        ss.str() +
        std::string(reinterpret_cast<const char *>(uuid), sizeof(uuid_t))
    );
  }

  //--------------------------------------------------------------------------
  //! Decode the size attribute encoded in the supplied uuid string, which
  //! should be generated by uuidGenerateEncodeSize
  //!
  //! @param uuid the uuid string
  //! @return the size attribute encoded in the uuid string
  //--------------------------------------------------------------------------
  static std::size_t uuidDecodeSize(
      const std::shared_ptr<const std::string>& uuid
  )
  {
    if(!uuid || uuid->size() != 10 + sizeof(uuid_t))
      throw std::invalid_argument("invalid version supplied."); 
    std::string size(uuid->substr(0,10));
    return atoi(size.c_str());
  }

}
}

#endif	/* __PATHUTIL_HH__ */

